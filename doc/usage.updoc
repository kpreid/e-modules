
  ? def moduleFromFile := <import:org.cubik.cle.module.moduleFromFile>
  # value: <moduleFromFile>

  ? def loadModule := <import:org.cubik.cle.module.loadModule>
  # value: <loadModule>
  
To use a module, you must acquire a module object, then load it. The result of loading is called a module instance.

XXX review terms 'load' and 'module instance'

  ? def testModule := moduleFromFile(<file:modules/test1/>); null
  
There will eventually be options relating to how changes in the filesystem affect the module.

  ? def instance := loadModule(testModule, [].asMap())
  # value: <moduleInstance>
  
  ? def scopeTester := instance["scopeTester"]
  # value: <scopeTester>
  
  ? [def r := scopeTester.getLoader(), r == instance]
  # value: [<moduleInstance>, true]
  XXX this will become false as soon as we implement internal names

  ? testModule["scopeTester.emaker"].getText().split("\n")[0]
  # value: "# First line of scopeTester.emaker"
 