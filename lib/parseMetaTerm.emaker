pragma.syntax("0.9")
pragma.enable("accumulator")

# XXX ejector for failures

def parseMetaTerm(metaTerm) {
  def where := metaTerm.getOptSpan()
  def term`module(@decls*)` := metaTerm

  def moduleName
  def immediatesFlex := [].asMap().diverge()
  
  for decl in decls { switch (decl) {
    match term`name(.String.@{n :String})` { bind moduleName := n }
    match term`name(@_*)` { throw("Malformed name declaration") }
    match term`exportFrom(.String.@{source :String},
                          .String.@{names :List[String]}*)` {
      def immedInfo := immediatesFlex.fetch(source, fn {
                         immediatesFlex[source] := [].asMap().diverge() 
                       })
      for name in names {
        immedInfo[name] := name
      }
    }
    match term`exportFrom(@_*)` { throw("Malformed exportFrom declaration") }
    match term`once(.String.@{components :List[String]}*)` {
      for component in components {
        immediatesFlex.fetch(component, fn {
          immediatesFlex[component] := [].asMap().diverge() 
        })
      }
    }
    match term`once(@_*)` { throw("Malformed once declaration") }
  }}
  
  require(Ref.isResolved(moduleName), fn{ `$where: no module name declared` })
  
  def immediates := accum [].asMap() for k => v in immediatesFlex { _.with(k, v.snapshot()) }
  
  return [=> moduleName,
          => immediates]
}